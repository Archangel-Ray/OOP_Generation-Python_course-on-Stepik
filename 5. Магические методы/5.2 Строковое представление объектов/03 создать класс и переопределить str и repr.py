"""
Реализуйте класс Vector, описывающий вектор на плоскости.
При создании экземпляра класс должен принимать два аргумента в следующем порядке:

    x — координата вектора по оси x
    y — координата вектора по оси y

Экземпляр класса Vector должен иметь следующее формальное строковое представление:

Vector(<координата x>, <координата y>)

И следующее неформальное строковое представление:

Вектор на плоскости с координатами (<координата x>, <координата y>)

Примечание 1. Дополнительная проверка данных на корректность не требуется.
Гарантируется, что реализованный класс используется только с корректными данными.

Примечание 2. Никаких ограничений касательно реализации класса Vector нет, она может быть произвольной.
"""


class Vector:
    def __init__(self, x_, y_):
        self.x = x_
        self.y = y_

    def __str__(self):
        return f"Вектор на плоскости с координатами ({self.x}, {self.y})"

    def __repr__(self):
        return f"Vector({self.x}, {self.y})"


# INPUT DATA:

# TEST_1:
print("\nтест 1")
vector = Vector(1, 2)

print(str(vector))
print(repr(vector))

# TEST_2:
print("\nтест 2")
vectors = [Vector(1, 2), Vector(3, 4)]

print(vectors)

# TEST_3:
print("\nтест 3")
vectors = [Vector(1, 2), Vector(3, 4), Vector(-1, 1), Vector(0, 0),
           Vector(-100, -100), Vector(25.5, -10.2), Vector(100.0, 0.5)]

for vector in vectors:
    print(vector)

# TEST_4:
print("\nтест 4")
vectors = [Vector(1, 2), Vector(3, 4), Vector(-1, 1), Vector(0, 0),
           Vector(-100, -100), Vector(25.5, -10.2), Vector(100.0, 0.5)]

print(vectors)

# TEST_5:
print("\nтест 5")
array = [(76, 164), (61, 124), (91, 192), (19, 158), (114, 142), (106, 49), (91, 43), (84, 35), (170, 24), (130, 116),
         (101, 191), (167, 148), (137, 107), (190, 21), (145, 170), (25, 15), (12, 20), (181, 97), (133, 155),
         (132, 195)]

for x, y in array:
    vector = Vector(x, y)
    print(repr(vector), vector, sep='; ')
