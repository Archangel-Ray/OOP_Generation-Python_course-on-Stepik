"""
Для выполнения первого шага используется магический метод __new__(), который отвечает за создание и возврат нового
    пустого экземпляра класса. Затем созданный экземпляр передается в метод __init__() для инициализации, то есть
    для добавления ему необходимых атрибутов.

Метод __new__() класса object отвечает за создание всех объектов в Python. Он принимает единственный аргумент — класс,
    экземпляр которого требуется создать. Именно этим мы и пользуемся: вызываем метод __new__() класса object, передаем
    ему в качестве аргумента наш класс Cat и получаем экземпляр класса Cat.

Метод __new__() принимает один обязательный аргумент — класс, экземпляр которого требуется создать. Этим аргументом
    всегда является сам класс, в котором реализован метод, в нашем случае это класс Cat. Произвольное количество
    позиционных и именованных аргументов в методе __new__() необходимо для того чтобы не ограничивать сигнатуру
    метода __init__(), так как аргументы, передаваемые классу при создании его экземпляра, попадают как
    в метод __new__(), так и в метод __init__().

В теле метода __new__() нам важна строка, в которой и происходит создание и возврат экземпляра класса. В ней мы
    с помощью функции super() обращаемся к родительскому методу __new__(), передавая в качестве аргумента
    текущий класс. Родительским классом является класс object, текущим — класс Cat, таким образом, вызов
    super().__new__(cls)
    равнозначен вызову
    object.__new__(Cat).

В Python все является объектом, даже сами классы. Так как за создание всех объектов отвечает метод __new__()
    класса object, все классы в Python являются экземплярами класса object.

Итак, мы имеем класс Cat, в котором определены методы __new__() и __init__(). В обоих методах содержится вывод
    некоторого текста, и порядок их вывода подтверждает сказанное в начале урока: сначала происходит создание
    экземпляра — вызов метода __new__(), а затем его инициализация — вызов метода __init__().
"""


class Cat:
    def __new__(cls, *args, **kwargs):
        print('1. Вызов метода __new__()')
        print(cls)
        return super().__new__(cls)

    def __init__(self, name):
        print('2. Вызов метода __init__()')
        self.name = name
        print(self)

    def __repr__(self):
        return f'Cat({repr(self.name)})'


cat = Cat('Кемаль')
